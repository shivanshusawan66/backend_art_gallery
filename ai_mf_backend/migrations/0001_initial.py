# Generated by Django 5.1.2 on 2025-04-18 13:53

import ai_mf_backend.models.v1.database.user
import ai_mf_backend.utils.v1.authentication.validators
import ai_mf_backend.utils.v1.database.images
import ai_mf_backend.utils.v1.validators.blog_report
import ai_mf_backend.utils.v1.validators.dates
import ai_mf_backend.utils.v1.validators.input
import ai_mf_backend.utils.v1.validators.name
import ai_mf_backend.utils.v1.validators.status
import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
import pgvector.django.vector
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.RunSQL("CREATE EXTENSION IF NOT EXISTS vector;"),
        migrations.CreateModel(
            name="Allowed_Response",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("response", models.CharField(max_length=500)),
                ("position", models.PositiveIntegerField(default=0.0)),
                ("response_weight", models.FloatField(default=0.0)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Allowed Response",
                "verbose_name_plural": "Allowed Response",
                "db_table": "allowed_response",
            },
        ),
        migrations.CreateModel(
            name="AnnualIncome",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "income_category",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.input.validate_number_dash_number
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Annual Income",
                "verbose_name_plural": "Annual Income",
                "db_table": "annual_income",
            },
        ),
        migrations.CreateModel(
            name="BlogCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=50, unique=True)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Blog Category",
                "verbose_name_plural": "Blog Categories",
                "db_table": "blog_category",
            },
        ),
        migrations.CreateModel(
            name="BlogCommentReportType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "report_type",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.blog_report.validate_report_type
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Blog Comment Report Type",
                "verbose_name_plural": "Blog Comment Report Types",
                "db_table": "blog_comment_report_type",
            },
        ),
        migrations.CreateModel(
            name="ContactMessageFundCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "fund_type",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.name.validate_name
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Contact Message Fund Cateogory",
                "verbose_name_plural": "Contact Message Fund Categories",
                "db_table": "contact_message_fund_category",
            },
        ),
        migrations.CreateModel(
            name="Gender",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "gender",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.status.validate_gender
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Gender",
                "verbose_name_plural": "Gender",
                "db_table": "gender",
            },
        ),
        migrations.CreateModel(
            name="InvestmentAmountPerYear",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "investment_amount_per_year",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.input.validate_number_dash_number
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Investment Amount Per Year",
                "verbose_name_plural": "Investment Amount Per Year",
                "db_table": "investment_amount_per_year",
            },
        ),
        migrations.CreateModel(
            name="MaritalStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "marital_status",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.status.validate_marital_status
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Marital Status",
                "verbose_name_plural": "Marital Status",
                "db_table": "marital_status",
            },
        ),
        migrations.CreateModel(
            name="MFFundManagerMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("initial", models.CharField(max_length=10)),
                ("fundmanager", models.CharField(max_length=200)),
                (
                    "qualification",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("experience", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "basicdetails",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "designation",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("age", models.IntegerField(blank=True, null=True)),
                ("reporteddate", models.DateTimeField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Fund Manager Master",
                "verbose_name_plural": "MF Fund Manager Masters",
                "db_table": "mf_fundmanager_master",
            },
        ),
        migrations.CreateModel(
            name="MFMarker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("marker", models.CharField(max_length=500)),
                ("initial_marker_weight", models.FloatField(default=0.0)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "MF Marker",
                "verbose_name_plural": "MF Markers",
                "db_table": "mf_marker",
            },
        ),
        migrations.CreateModel(
            name="MonthlySavingCapacity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "saving_category",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.input.validate_number_dash_number
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Monthly Saving Capacity",
                "verbose_name_plural": "Monthly Saving Capacity",
                "db_table": "monthly_saving_capacity",
            },
        ),
        migrations.CreateModel(
            name="MutualFundType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("fund_type", models.CharField(max_length=50, unique=True)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Mutual Fund Type",
                "verbose_name_plural": "Mutual Fund Types",
                "db_table": "mutual_fund_type",
            },
        ),
        migrations.CreateModel(
            name="Occupation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "occupation",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.status.validate_occupation
                        ],
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Occupation",
                "verbose_name_plural": "Occupation",
                "db_table": "occupation",
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("question", models.CharField(max_length=500)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                ("initial_question_weight", models.FloatField(default=0.0)),
                ("visibility_question", models.CharField(max_length=50)),
            ],
            options={
                "verbose_name": "Question",
                "verbose_name_plural": "Question",
                "db_table": "question",
            },
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("section", models.CharField(max_length=100, unique=True)),
                ("initial_section_weight", models.FloatField(default=0.0)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Section",
                "verbose_name_plural": "Section",
                "db_table": "section",
            },
        ),
        migrations.CreateModel(
            name="SectionWeightsPerMutualFund",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("scheme_code", models.IntegerField()),
                ("embedding", pgvector.django.vector.VectorField(dimensions=7)),
            ],
            options={
                "verbose_name": "Section Weights Per Mutual Fund",
                "verbose_name_plural": "Section Weights Per Mutual Fund",
                "db_table": "section_weights_per_mutual_fund",
            },
        ),
        migrations.CreateModel(
            name="BlogData",
            fields=[
                ("deleted", models.BooleanField(default=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "username",
                    models.CharField(
                        blank=True, editable=False, max_length=100, null=True
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("blog_description", django_ckeditor_5.fields.CKEditor5Field()),
                (
                    "user_image",
                    models.ImageField(
                        blank=True, editable=False, null=True, upload_to="user_images/"
                    ),
                ),
                (
                    "blogcard_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="blogcard_images/",
                        validators=[
                            ai_mf_backend.utils.v1.database.images.validate_image_size
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.blogcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Data",
                "verbose_name_plural": "Blogs Data",
                "db_table": "blog_data",
            },
        ),
        migrations.CreateModel(
            name="BlogComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("content", models.TextField()),
                (
                    "username",
                    models.CharField(
                        blank=True, editable=False, max_length=150, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "blog_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.blogdata",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Comment",
                "verbose_name_plural": "Blog Comments",
                "db_table": "blog_comment",
            },
        ),
        migrations.CreateModel(
            name="ContactMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "first_name",
                    models.CharField(
                        max_length=100,
                        validators=[
                            ai_mf_backend.utils.v1.validators.name.validate_name
                        ],
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.name.validate_name
                        ],
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "phone_number",
                    models.CharField(
                        max_length=20,
                        validators=[
                            ai_mf_backend.utils.v1.authentication.validators.custom_validate_international_phonenumber
                        ],
                    ),
                ),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "category_id",
                    models.ForeignKey(
                        db_column="category_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.contactmessagefundcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact Message",
                "verbose_name_plural": "Contact Messages",
                "db_table": "contact_message",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MFAbsoluteReturn",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("c_date", models.DateTimeField(blank=True, null=True)),
                ("p_date", models.DateTimeField(blank=True, null=True)),
                ("c_nav", models.FloatField(blank=True, null=True)),
                ("p_nav", models.FloatField(blank=True, null=True)),
                ("_1dayret", models.FloatField(blank=True, null=True)),
                ("_1weekdate", models.DateTimeField(blank=True, null=True)),
                ("_1weeknav", models.FloatField(blank=True, null=True)),
                ("_1weekret", models.FloatField(blank=True, null=True)),
                ("_1mthdate", models.DateTimeField(blank=True, null=True)),
                ("_1mthnav", models.FloatField(blank=True, null=True)),
                ("_1monthret", models.FloatField(blank=True, null=True)),
                ("_3mthdate", models.DateTimeField(blank=True, null=True)),
                ("_3mthnav", models.FloatField(blank=True, null=True)),
                ("_3monthret", models.FloatField(blank=True, null=True)),
                ("_6mntdate", models.DateTimeField(blank=True, null=True)),
                ("_6mnthnav", models.FloatField(blank=True, null=True)),
                ("_6monthret", models.FloatField(blank=True, null=True)),
                ("_9mnthdate", models.DateTimeField(blank=True, null=True)),
                ("_9mnthnav", models.FloatField(blank=True, null=True)),
                ("_9mnthret", models.FloatField(blank=True, null=True)),
                ("_1yrdate", models.DateTimeField(blank=True, null=True)),
                ("_1yrnav", models.FloatField(blank=True, null=True)),
                ("_1yrret", models.FloatField(blank=True, null=True)),
                ("_2yrdate", models.DateTimeField(blank=True, null=True)),
                ("_2yrnav", models.FloatField(blank=True, null=True)),
                ("_2yearret", models.FloatField(blank=True, null=True)),
                ("_3yrdate", models.DateTimeField(blank=True, null=True)),
                ("_3yrnav", models.FloatField(blank=True, null=True)),
                ("_3yearret", models.FloatField(blank=True, null=True)),
                ("_4yrdate", models.DateTimeField(blank=True, null=True)),
                ("_4yrnav", models.FloatField(blank=True, null=True)),
                ("_4yearret", models.FloatField(blank=True, null=True)),
                ("_5yrdate", models.DateTimeField(blank=True, null=True)),
                ("_5yrnav", models.FloatField(blank=True, null=True)),
                ("_5yearret", models.FloatField(blank=True, null=True)),
                ("incdate", models.DateTimeField(blank=True, null=True)),
                ("incnav", models.FloatField(blank=True, null=True)),
                ("incret", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Absolute Return",
                "verbose_name_plural": "MF Absolute Returns",
                "db_table": "mf_absolute_return",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_absolute_schemec_b6723e_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFAMCAUM",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField()),
                ("aumdate", models.DateTimeField(blank=True, null=True)),
                ("totalaum", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF AMC AUM",
                "verbose_name_plural": "MF AMC AUMs",
                "db_table": "mf_amc_aum",
                "indexes": [
                    models.Index(
                        fields=["amc_code", "aumdate"],
                        name="mf_amc_aum_amc_cod_58d541_idx",
                    )
                ],
                "unique_together": {("amc_code", "aumdate")},
            },
        ),
        migrations.CreateModel(
            name="MFAMCKeyPerson",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField()),
                ("amc_name", models.TextField()),
                ("srno", models.IntegerField()),
                ("name", models.CharField(max_length=1000)),
                ("desig", models.CharField(max_length=1000)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF AMC Key Person",
                "verbose_name_plural": "MF AMC Key Persons",
                "db_table": "mf_amc_keyperson",
                "indexes": [
                    models.Index(
                        fields=["amc_code", "srno"],
                        name="mf_amc_keyp_amc_cod_bca462_idx",
                    )
                ],
                "unique_together": {("amc_code", "srno")},
            },
        ),
        migrations.CreateModel(
            name="MFAMCMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField()),
                ("amc", models.CharField(max_length=255)),
                ("fund", models.CharField(max_length=255)),
                ("srno", models.IntegerField()),
                ("office_type", models.CharField(max_length=60)),
                ("add1", models.TextField(blank=True, null=True)),
                ("add2", models.TextField(blank=True, null=True)),
                ("add3", models.TextField(blank=True, null=True)),
                ("email", models.CharField(blank=True, max_length=255, null=True)),
                ("phone", models.CharField(blank=True, max_length=255, null=True)),
                ("fax", models.CharField(blank=True, max_length=255, null=True)),
                ("webiste", models.CharField(blank=True, max_length=255, null=True)),
                ("setup_date", models.DateTimeField(blank=True, null=True)),
                ("mf_type", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "trustee_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("sponsor_name", models.TextField(blank=True, null=True)),
                ("amc_inc_date", models.DateTimeField(blank=True, null=True)),
                ("s_name", models.CharField(blank=True, max_length=50, null=True)),
                ("amc_symbol", models.CharField(blank=True, max_length=50, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("rtamccode", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "rtamccode_1",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF AMC Master",
                "verbose_name_plural": "MF AMC Masters",
                "db_table": "mf_amc_master",
                "indexes": [
                    models.Index(
                        fields=["amc_code"], name="mf_amc_mast_amc_cod_467fb2_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFAMCPortfolioAUM",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField()),
                ("aumdate", models.DateTimeField(blank=True, null=True)),
                ("totalaum", models.FloatField(blank=True, null=True)),
                ("FLAG", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF AMC Portfolio AUM",
                "verbose_name_plural": "MF AMC Portfolio AUMs",
                "db_table": "mf_amc_portfolio_aum",
                "indexes": [
                    models.Index(
                        fields=["amc_code", "aumdate"],
                        name="mf_amc_port_amc_cod_c59334_idx",
                    )
                ],
                "unique_together": {("amc_code", "aumdate")},
            },
        ),
        migrations.CreateModel(
            name="MFAnnualizedReturn",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("c_date", models.DateTimeField(blank=True, null=True)),
                ("p_date", models.DateTimeField(blank=True, null=True)),
                ("c_nav", models.FloatField(blank=True, null=True)),
                ("p_nav", models.FloatField(blank=True, null=True)),
                ("_1dayret", models.FloatField(blank=True, null=True)),
                ("_1weekdate", models.DateTimeField(blank=True, null=True)),
                ("_1weeknav", models.FloatField(blank=True, null=True)),
                ("_1weekret", models.FloatField(blank=True, null=True)),
                ("_1mthdate", models.DateTimeField(blank=True, null=True)),
                ("_1mthnav", models.FloatField(blank=True, null=True)),
                ("_1monthret", models.FloatField(blank=True, null=True)),
                ("_3mthdate", models.DateTimeField(blank=True, null=True)),
                ("_3mthnav", models.FloatField(blank=True, null=True)),
                ("_3monthret", models.FloatField(blank=True, null=True)),
                ("_6mntdate", models.DateTimeField(blank=True, null=True)),
                ("_6mnthnav", models.FloatField(blank=True, null=True)),
                ("_6monthret", models.FloatField(blank=True, null=True)),
                ("_9mnthdate", models.DateTimeField(blank=True, null=True)),
                ("_9mnthnav", models.FloatField(blank=True, null=True)),
                ("_9mnthret", models.FloatField(blank=True, null=True)),
                ("_1yrdate", models.DateTimeField(blank=True, null=True)),
                ("_1yrnav", models.FloatField(blank=True, null=True)),
                ("_1yrret", models.FloatField(blank=True, null=True)),
                ("_2yrdate", models.DateTimeField(blank=True, null=True)),
                ("_2yrnav", models.FloatField(blank=True, null=True)),
                ("_2yearret", models.FloatField(blank=True, null=True)),
                ("_3yrdate", models.DateTimeField(blank=True, null=True)),
                ("_3yrnav", models.FloatField(blank=True, null=True)),
                ("_3yearret", models.FloatField(blank=True, null=True)),
                ("_4yrdate", models.DateTimeField(blank=True, null=True)),
                ("_4yrnav", models.FloatField(blank=True, null=True)),
                ("_4yearret", models.FloatField(blank=True, null=True)),
                ("_5yrdate", models.DateTimeField(blank=True, null=True)),
                ("_5yrnav", models.FloatField(blank=True, null=True)),
                ("_5yearret", models.FloatField(blank=True, null=True)),
                ("incdate", models.DateTimeField(blank=True, null=True)),
                ("incnav", models.FloatField(blank=True, null=True)),
                ("incret", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Annualized Return",
                "verbose_name_plural": "MF Annualized Returns",
                "db_table": "mf_annualized_return",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_annualiz_schemec_2e17bd_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFAssetAllocationMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("asect_code", models.FloatField()),
                ("asect_type", models.CharField(max_length=100)),
                ("asset", models.CharField(max_length=50)),
                ("as_name", models.CharField(max_length=50)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Asset Allocation Master",
                "verbose_name_plural": "MF Asset Allocation Masters",
                "db_table": "mf_asset_allocation_master",
                "indexes": [
                    models.Index(
                        fields=["asect_code"], name="mf_asset_al_asect_c_94fb69_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFAverageSchemeAUM",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("exfof", models.FloatField(blank=True, null=True)),
                ("fof", models.FloatField(blank=True, null=True)),
                ("total", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Average Scheme AUM",
                "verbose_name_plural": "MF Average Scheme AUMs",
                "db_table": "mf_average_scheme_aum",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "date"],
                        name="mf_average__schemec_eaeae4_idx",
                    )
                ],
                "unique_together": {("schemecode", "date")},
            },
        ),
        migrations.CreateModel(
            name="MFBenchmarkIndicesAbsoluteReturn",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("index_code", models.IntegerField()),
                ("symbol", models.CharField(blank=True, max_length=255, null=True)),
                ("scripcode", models.IntegerField(blank=True, null=True)),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("prev_date", models.DateTimeField(blank=True, null=True)),
                ("close", models.FloatField(blank=True, null=True)),
                ("prev_close", models.FloatField(blank=True, null=True)),
                ("_1dayret", models.FloatField(blank=True, null=True)),
                ("_1weekdate", models.DateTimeField(blank=True, null=True)),
                ("_1weekclose", models.FloatField(blank=True, null=True)),
                ("_1weekret", models.FloatField(blank=True, null=True)),
                ("_1mthdate", models.DateTimeField(blank=True, null=True)),
                ("_1mthclose", models.FloatField(blank=True, null=True)),
                ("_1monthret", models.FloatField(blank=True, null=True)),
                ("_3mthdate", models.DateTimeField(blank=True, null=True)),
                ("_3mthclose", models.FloatField(blank=True, null=True)),
                ("_3monthret", models.FloatField(blank=True, null=True)),
                ("_6mntdate", models.DateTimeField(blank=True, null=True)),
                ("_6mnthclose", models.FloatField(blank=True, null=True)),
                ("_6monthret", models.FloatField(blank=True, null=True)),
                ("_9mnthdate", models.DateTimeField(blank=True, null=True)),
                ("_9mnthclose", models.FloatField(blank=True, null=True)),
                ("_9mnthret", models.FloatField(blank=True, null=True)),
                ("_1yrdate", models.DateTimeField(blank=True, null=True)),
                ("_1yrclose", models.FloatField(blank=True, null=True)),
                ("_1yrret", models.FloatField(blank=True, null=True)),
                ("_2yrdate", models.DateTimeField(blank=True, null=True)),
                ("_2yrclose", models.FloatField(blank=True, null=True)),
                ("_2yearret", models.FloatField(blank=True, null=True)),
                ("_3yrdate", models.DateTimeField(blank=True, null=True)),
                ("_3yrclose", models.FloatField(blank=True, null=True)),
                ("_3yearret", models.FloatField(blank=True, null=True)),
                ("_4yrdate", models.DateTimeField(blank=True, null=True)),
                ("_4yrclose", models.FloatField(blank=True, null=True)),
                ("_4yearret", models.FloatField(blank=True, null=True)),
                ("_5yrdate", models.DateTimeField(blank=True, null=True)),
                ("_5yrclose", models.FloatField(blank=True, null=True)),
                ("_5yearret", models.FloatField(blank=True, null=True)),
                ("incdate", models.DateTimeField(blank=True, null=True)),
                ("incclose", models.FloatField(blank=True, null=True)),
                ("incret", models.FloatField(blank=True, null=True)),
                ("_2weekdate", models.DateTimeField(blank=True, null=True)),
                ("_2weekclose", models.FloatField(blank=True, null=True)),
                ("_2weekret", models.FloatField(blank=True, null=True)),
                ("_3weekdate", models.DateTimeField(blank=True, null=True)),
                ("_3weekclose", models.FloatField(blank=True, null=True)),
                ("_3weekret", models.FloatField(blank=True, null=True)),
                ("_2mthdate", models.DateTimeField(blank=True, null=True)),
                ("_2mthclose", models.FloatField(blank=True, null=True)),
                ("_2monthret", models.FloatField(blank=True, null=True)),
                ("ytddate", models.DateTimeField(blank=True, null=True)),
                ("ytdclose", models.FloatField(blank=True, null=True)),
                ("ytdret", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Benchmark Indices Absolute Return",
                "verbose_name_plural": "MF Benchmark Indices Absolute Returns",
                "db_table": "mf_benchmark_indices_absolute_return",
                "indexes": [
                    models.Index(
                        fields=["index_code"], name="mf_benchmar_index_c_f57ca4_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFBenchmarkIndicesAnnualisedReturn",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("index_code", models.IntegerField()),
                ("symbol", models.CharField(blank=True, max_length=255, null=True)),
                ("scripcode", models.IntegerField(blank=True, null=True)),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("prev_date", models.DateTimeField(blank=True, null=True)),
                ("close", models.FloatField(blank=True, null=True)),
                ("prev_close", models.FloatField(blank=True, null=True)),
                ("_1dayret", models.FloatField(blank=True, null=True)),
                ("_1weekdate", models.DateTimeField(blank=True, null=True)),
                ("_1weekclose", models.FloatField(blank=True, null=True)),
                ("_1weekret", models.FloatField(blank=True, null=True)),
                ("_1mthdate", models.DateTimeField(blank=True, null=True)),
                ("_1mthclose", models.FloatField(blank=True, null=True)),
                ("_1monthret", models.FloatField(blank=True, null=True)),
                ("_3mthdate", models.DateTimeField(blank=True, null=True)),
                ("_3mthclose", models.FloatField(blank=True, null=True)),
                ("_3monthret", models.FloatField(blank=True, null=True)),
                ("_6mnthdate", models.DateTimeField(blank=True, null=True)),
                ("_6mnthclose", models.FloatField(blank=True, null=True)),
                ("_6monthret", models.FloatField(blank=True, null=True)),
                ("_9mnthdate", models.DateTimeField(blank=True, null=True)),
                ("_9mnthclose", models.FloatField(blank=True, null=True)),
                ("_9mnthret", models.FloatField(blank=True, null=True)),
                ("_1yrdate", models.DateTimeField(blank=True, null=True)),
                ("_1yrclose", models.FloatField(blank=True, null=True)),
                ("_1yrret", models.FloatField(blank=True, null=True)),
                ("_2yrdate", models.DateTimeField(blank=True, null=True)),
                ("_2yrclose", models.FloatField(blank=True, null=True)),
                ("_2yearret", models.FloatField(blank=True, null=True)),
                ("_3yrdate", models.DateTimeField(blank=True, null=True)),
                ("_3yrclose", models.FloatField(blank=True, null=True)),
                ("_3yearret", models.FloatField(blank=True, null=True)),
                ("_4yrdate", models.DateTimeField(blank=True, null=True)),
                ("_4yrclose", models.FloatField(blank=True, null=True)),
                ("_4yearret", models.FloatField(blank=True, null=True)),
                ("_5yrdate", models.DateTimeField(blank=True, null=True)),
                ("_5yrclose", models.FloatField(blank=True, null=True)),
                ("_5yearret", models.FloatField(blank=True, null=True)),
                ("incdate", models.DateTimeField(blank=True, null=True)),
                ("incclose", models.FloatField(blank=True, null=True)),
                ("incret", models.FloatField(blank=True, null=True)),
                ("_2weekdate", models.DateTimeField(blank=True, null=True)),
                ("_2weekclose", models.FloatField(blank=True, null=True)),
                ("_2weekret", models.FloatField(blank=True, null=True)),
                ("_3weekdate", models.DateTimeField(blank=True, null=True)),
                ("_3weekclose", models.FloatField(blank=True, null=True)),
                ("_3weekret", models.FloatField(blank=True, null=True)),
                ("_2mthdate", models.DateTimeField(blank=True, null=True)),
                ("_2mthclose", models.FloatField(blank=True, null=True)),
                ("_2monthret", models.FloatField(blank=True, null=True)),
                ("ytddate", models.DateTimeField(blank=True, null=True)),
                ("ytdclose", models.FloatField(blank=True, null=True)),
                ("ytdret", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Benchmark Indices Annualised Return",
                "verbose_name_plural": "MF Benchmark Indices Annualised Returns",
                "db_table": "mf_benchmark_indices_annualised_return",
                "indexes": [
                    models.Index(
                        fields=["index_code"], name="mf_benchmar_index_c_144634_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFBulkDeals",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("fincode", models.IntegerField()),
                ("date", models.DateTimeField()),
                ("exchange", models.CharField(max_length=50)),
                ("clientname", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=50)),
                ("mfcode", models.IntegerField()),
                ("dealtype", models.CharField(max_length=5)),
                ("volume", models.DecimalField(decimal_places=0, max_digits=18)),
                ("price", models.FloatField()),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Bulk Deal",
                "verbose_name_plural": "MF Bulk Deals",
                "db_table": "mf_bulk_deals",
                "indexes": [
                    models.Index(
                        fields=[
                            "fincode",
                            "date",
                            "clientname",
                            "dealtype",
                            "volume",
                            "price",
                        ],
                        name="mf_bulk_dea_fincode_6c44d5_idx",
                    )
                ],
                "unique_together": {
                    ("fincode", "date", "clientname", "dealtype", "volume", "price")
                },
            },
        ),
        migrations.CreateModel(
            name="MFCAGRReturn",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("c_date", models.DateTimeField(blank=True, null=True)),
                ("p_date", models.DateTimeField(blank=True, null=True)),
                ("c_nav", models.FloatField(blank=True, null=True)),
                ("p_nav", models.FloatField(blank=True, null=True)),
                ("_1dayret", models.FloatField(blank=True, null=True)),
                ("_1weekdate", models.DateTimeField(blank=True, null=True)),
                ("_1weeknav", models.FloatField(blank=True, null=True)),
                ("_1weekret", models.FloatField(blank=True, null=True)),
                ("_1mthdate", models.DateTimeField(blank=True, null=True)),
                ("_1mthnav", models.FloatField(blank=True, null=True)),
                ("_1monthret", models.FloatField(blank=True, null=True)),
                ("_3mthdate", models.DateTimeField(blank=True, null=True)),
                ("_3mthnav", models.FloatField(blank=True, null=True)),
                ("_3monthret", models.FloatField(blank=True, null=True)),
                ("_6mntdate", models.DateTimeField(blank=True, null=True)),
                ("_6mnthnav", models.FloatField(blank=True, null=True)),
                ("_6monthret", models.FloatField(blank=True, null=True)),
                ("_9mnthdate", models.DateTimeField(blank=True, null=True)),
                ("_9mnthnav", models.FloatField(blank=True, null=True)),
                ("_9mnthret", models.FloatField(blank=True, null=True)),
                ("_1yrdate", models.DateTimeField(blank=True, null=True)),
                ("_1yrnav", models.FloatField(blank=True, null=True)),
                ("_1yrret", models.FloatField(blank=True, null=True)),
                ("_2yrdate", models.DateTimeField(blank=True, null=True)),
                ("_2yrnav", models.FloatField(blank=True, null=True)),
                ("_2yearret", models.FloatField(blank=True, null=True)),
                ("_3yrdate", models.DateTimeField(blank=True, null=True)),
                ("_3yrnav", models.FloatField(blank=True, null=True)),
                ("_3yearret", models.FloatField(blank=True, null=True)),
                ("_4yrdate", models.DateTimeField(blank=True, null=True)),
                ("_4yrnav", models.FloatField(blank=True, null=True)),
                ("_4yearret", models.FloatField(blank=True, null=True)),
                ("_5yrdate", models.DateTimeField(blank=True, null=True)),
                ("_5yrnav", models.FloatField(blank=True, null=True)),
                ("_5yearret", models.FloatField(blank=True, null=True)),
                ("incdate", models.DateTimeField(blank=True, null=True)),
                ("incnav", models.FloatField(blank=True, null=True)),
                ("incret", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF CAGR Return",
                "verbose_name_plural": "MF CAGR Returns",
                "db_table": "mf_cagr_return",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_cagr_ret_schemec_332129_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFCategoryWiseReturn",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("classcode", models.IntegerField(blank=True, null=True)),
                ("classname", models.CharField(max_length=500)),
                ("opt_code", models.IntegerField(blank=True, null=True)),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("_1dayret", models.FloatField(blank=True, null=True)),
                ("_1weekret", models.FloatField(blank=True, null=True)),
                ("_2weekret", models.FloatField(blank=True, null=True)),
                ("_3weekret", models.FloatField(blank=True, null=True)),
                ("_1monthret", models.FloatField(blank=True, null=True)),
                ("_2monthret", models.FloatField(blank=True, null=True)),
                ("_3monthret", models.FloatField(blank=True, null=True)),
                ("_6monthret", models.FloatField(blank=True, null=True)),
                ("_9mnthret", models.FloatField(blank=True, null=True)),
                ("_1yearret", models.FloatField(blank=True, null=True)),
                ("_2yearret", models.FloatField(blank=True, null=True)),
                ("_3yearret", models.FloatField(blank=True, null=True)),
                ("_4yearret", models.FloatField(blank=True, null=True)),
                ("_5yearret", models.FloatField(blank=True, null=True)),
                ("incret", models.FloatField(blank=True, null=True)),
                ("ytdret", models.FloatField(blank=True, null=True)),
                ("_1wschemecode", models.IntegerField(blank=True, null=True)),
                ("weekHighRet", models.FloatField(blank=True, null=True)),
                ("_1mschemecode", models.IntegerField(blank=True, null=True)),
                ("monthhighret", models.FloatField(blank=True, null=True)),
                ("_3mschemecode", models.IntegerField(blank=True, null=True)),
                ("_3monthHighret", models.FloatField(blank=True, null=True)),
                ("_6mschemecode", models.IntegerField(blank=True, null=True)),
                ("_6monthhighret", models.FloatField(blank=True, null=True)),
                ("_1yschemecode", models.IntegerField(blank=True, null=True)),
                ("_1yhighret", models.FloatField(blank=True, null=True)),
                ("_3yschemecode", models.IntegerField(blank=True, null=True)),
                ("_3yhighret", models.FloatField(blank=True, null=True)),
                ("_5yschemecode", models.IntegerField(blank=True, null=True)),
                ("_5yhighret", models.FloatField(blank=True, null=True)),
                ("incretschemecode", models.IntegerField(blank=True, null=True)),
                ("increthighret", models.FloatField(blank=True, null=True)),
                ("worst1wSchemecode", models.IntegerField(blank=True, null=True)),
                ("weekWorstRet", models.FloatField(blank=True, null=True)),
                ("worst1mschemecode", models.IntegerField(blank=True, null=True)),
                ("monthworstret", models.FloatField(blank=True, null=True)),
                ("worst3mschemecode", models.IntegerField(blank=True, null=True)),
                ("_3monthworstret", models.FloatField(blank=True, null=True)),
                ("worst6mschemecode", models.IntegerField(blank=True, null=True)),
                ("_6monthWorstRet", models.FloatField(blank=True, null=True)),
                ("worst1yschemecode", models.IntegerField(blank=True, null=True)),
                ("_1yworstret", models.FloatField(blank=True, null=True)),
                ("worst3yschemecode", models.IntegerField(blank=True, null=True)),
                ("_3yworstret", models.FloatField(blank=True, null=True)),
                ("worst5yschemecode", models.IntegerField(blank=True, null=True)),
                ("_5yworstret", models.FloatField(blank=True, null=True)),
                ("Worstincretschemecode", models.IntegerField(blank=True, null=True)),
                ("incretworstret", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Category Wise Return",
                "verbose_name_plural": "MF Category Wise Returns",
                "db_table": "mf_category_wise_return",
                "indexes": [
                    models.Index(
                        fields=["classcode", "opt_code"],
                        name="mf_category_classco_faeedb_idx",
                    )
                ],
                "unique_together": {("classcode", "opt_code")},
            },
        ),
        migrations.CreateModel(
            name="MFCompanyMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("fincode", models.IntegerField()),
                ("scripcode", models.IntegerField(blank=True, null=True)),
                ("symbol", models.CharField(blank=True, max_length=50, null=True)),
                ("compname", models.CharField(blank=True, max_length=255, null=True)),
                ("s_name", models.CharField(blank=True, max_length=100, null=True)),
                ("ind_code", models.IntegerField(blank=True, null=True)),
                ("Industry", models.CharField(blank=True, max_length=100, null=True)),
                ("isin", models.CharField(blank=True, max_length=50, null=True)),
                ("status", models.CharField(blank=True, max_length=50, null=True)),
                ("series", models.CharField(blank=True, max_length=2, null=True)),
                ("listing", models.CharField(blank=True, max_length=50, null=True)),
                ("sublisting", models.CharField(blank=True, max_length=50, null=True)),
                ("fv", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Company Master",
                "verbose_name_plural": "MF Company Masters",
                "db_table": "mf_company_master",
                "indexes": [
                    models.Index(
                        fields=["fincode"], name="mf_company__fincode_f79017_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFCompanyMcap",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("fincode", models.IntegerField()),
                ("mcap", models.FloatField()),
                ("mode", models.CharField(max_length=20)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Company Mcap",
                "verbose_name_plural": "MF Company Mcap",
                "db_table": "mf_company_mcap",
                "indexes": [
                    models.Index(
                        fields=["fincode"], name="mf_company__fincode_49c0fb_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFCustodianMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("cust_code", models.IntegerField()),
                ("cust_name", models.CharField(max_length=100)),
                ("sebi_reg_no", models.CharField(max_length=25)),
                ("add1", models.TextField()),
                ("add2", models.TextField()),
                ("add3", models.TextField()),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Custodian Master",
                "verbose_name_plural": "MF Custodian Masters",
                "db_table": "mf_custodian_master",
                "indexes": [
                    models.Index(
                        fields=["cust_code"], name="mf_custodia_cust_co_533713_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFDividendDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField()),
                ("schemecode", models.IntegerField()),
                ("recorddate", models.DateTimeField(blank=True, null=True)),
                ("div_code", models.IntegerField(blank=True, null=True)),
                ("exdivdate", models.DateTimeField(blank=True, null=True)),
                ("Bonusrate1", models.FloatField(blank=True, null=True)),
                ("Bonusrate2", models.FloatField(blank=True, null=True)),
                ("gross", models.FloatField(blank=True, null=True)),
                ("corporate", models.FloatField(blank=True, null=True)),
                ("noncorporate", models.FloatField(blank=True, null=True)),
                ("status", models.CharField(blank=True, max_length=3, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Dividend Detail",
                "verbose_name_plural": "MF Dividend Details",
                "db_table": "mf_dividend_details",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "recorddate"],
                        name="mf_dividend_schemec_c0d3bc_idx",
                    )
                ],
                "unique_together": {("schemecode", "recorddate")},
            },
        ),
        migrations.CreateModel(
            name="MFDividendMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("div_code", models.FloatField()),
                ("div_type", models.CharField(max_length=30)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Dividend Master",
                "verbose_name_plural": "MF Dividend Masters",
                "db_table": "mf_dividend_master",
                "indexes": [
                    models.Index(
                        fields=["div_code"], name="mf_dividend_div_cod_15750e_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFFaceValueChange",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField()),
                ("schemecode", models.IntegerField()),
                (
                    "scheme_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("fvbefore", models.FloatField()),
                ("fvafter", models.FloatField()),
                ("fvdate", models.DateTimeField()),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Face Value Change",
                "verbose_name_plural": "MF Face Value Change",
                "db_table": "mf_face_value_change",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "fvdate"],
                        name="mf_face_val_schemec_f723bd_idx",
                    )
                ],
                "unique_together": {("schemecode", "fvdate")},
            },
        ),
        migrations.CreateModel(
            name="MFFundmanager",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("date", models.DateTimeField()),
                ("amc", models.IntegerField()),
                ("schemecode", models.IntegerField()),
                ("fundManger1", models.IntegerField(blank=True, null=True)),
                ("fundManger2", models.IntegerField(blank=True, null=True)),
                ("fundManger3", models.IntegerField(blank=True, null=True)),
                ("fundManger4", models.IntegerField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Fund Manager",
                "verbose_name_plural": "MF Fund Manager",
                "db_table": "mf_fund_manager",
                "indexes": [
                    models.Index(
                        fields=["date", "schemecode"],
                        name="mf_fund_man_date_ee5754_idx",
                    )
                ],
                "unique_together": {("date", "schemecode")},
            },
        ),
        migrations.CreateModel(
            name="MFIndexMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("indexcode", models.IntegerField()),
                ("fincode", models.IntegerField(blank=True, null=True)),
                ("scripcode", models.IntegerField(blank=True, null=True)),
                ("indexname", models.CharField(max_length=255)),
                ("index_gp", models.CharField(max_length=250)),
                ("subgroup", models.CharField(max_length=250)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Index Master",
                "verbose_name_plural": "MF Index Masters",
                "db_table": "mf_index_master",
                "indexes": [
                    models.Index(
                        fields=["indexcode"], name="mf_index_ma_indexco_e251c2_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFIndustryMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("Ind_code", models.IntegerField()),
                ("Industry", models.CharField(max_length=255)),
                ("Ind_shortname", models.CharField(max_length=255)),
                ("Sector", models.CharField(max_length=255)),
                ("Sector_code", models.IntegerField()),
                ("Flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Industry Master",
                "verbose_name_plural": "MF Industry Masters",
                "db_table": "mf_industry_master",
                "indexes": [
                    models.Index(
                        fields=["Ind_code"], name="mf_industry_Ind_cod_39e322_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFLoadTypeMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("ltypecode", models.IntegerField()),
                ("load", models.CharField(max_length=20)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Load Type Master",
                "verbose_name_plural": "MF Load Type Masters",
                "db_table": "mf_loadtype_master",
                "indexes": [
                    models.Index(
                        fields=["ltypecode"], name="mf_loadtype_ltypeco_89573e_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFMarkerOptions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("option", models.TextField()),
                ("position", models.PositiveIntegerField(default=0.0)),
                ("option_weight", models.FloatField(default=0.0)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "marker_id",
                    models.ForeignKey(
                        db_column="marker_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.mfmarker",
                    ),
                ),
                (
                    "section_id",
                    models.ForeignKey(
                        db_column="section_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.section",
                    ),
                ),
            ],
            options={
                "verbose_name": "MF Marker Option",
                "verbose_name_plural": "MF Marker Options",
                "db_table": "mf_marker_options",
            },
        ),
        migrations.CreateModel(
            name="MFMergedschemes",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("mergedwith", models.IntegerField()),
                ("EFFECT_DATE", models.DateTimeField()),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Merged Scheme",
                "verbose_name_plural": "MF Merged Schemes",
                "db_table": "mf_merged_schemes",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "mergedwith"],
                        name="mf_merged_s_schemec_4cf276_idx",
                    )
                ],
                "unique_together": {("schemecode", "mergedwith")},
            },
        ),
        migrations.CreateModel(
            name="MFNetAssetValueHighLow",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("_3monthhhigh", models.FloatField(blank=True, null=True)),
                ("_3monthlow", models.FloatField(blank=True, null=True)),
                ("_3mhdate", models.DateTimeField(blank=True, null=True)),
                ("_3mldate", models.DateTimeField(blank=True, null=True)),
                ("_6monthhhigh", models.FloatField(blank=True, null=True)),
                ("_6monthlow", models.FloatField(blank=True, null=True)),
                ("_6mhdate", models.DateTimeField(blank=True, null=True)),
                ("_6mldate", models.DateTimeField(blank=True, null=True)),
                ("_9monthhhigh", models.FloatField(blank=True, null=True)),
                ("_9monthlow", models.FloatField(blank=True, null=True)),
                ("_9mhdate", models.DateTimeField(blank=True, null=True)),
                ("_9mldate", models.DateTimeField(blank=True, null=True)),
                ("_52weekhhigh", models.FloatField(blank=True, null=True)),
                ("_52weeklow", models.FloatField(blank=True, null=True)),
                ("_52whdate", models.DateTimeField(blank=True, null=True)),
                ("_52wldate", models.DateTimeField(blank=True, null=True)),
                ("_1yrhigh", models.FloatField(blank=True, null=True)),
                ("_1yrlow", models.FloatField(blank=True, null=True)),
                ("_1yhdate", models.DateTimeField(blank=True, null=True)),
                ("_1yldate", models.DateTimeField(blank=True, null=True)),
                ("_2yrhigh", models.FloatField(blank=True, null=True)),
                ("_2yrlow", models.FloatField(blank=True, null=True)),
                ("_2yhdate", models.DateTimeField(blank=True, null=True)),
                ("_2yldate", models.DateTimeField(blank=True, null=True)),
                ("_3yrhigh", models.FloatField(blank=True, null=True)),
                ("_3yrlow", models.FloatField(blank=True, null=True)),
                ("_3yhdate", models.DateTimeField(blank=True, null=True)),
                ("_3yldate", models.DateTimeField(blank=True, null=True)),
                ("_5yrhigh", models.FloatField(blank=True, null=True)),
                ("_5yrlow", models.FloatField(blank=True, null=True)),
                ("_5yhdate", models.DateTimeField(blank=True, null=True)),
                ("_5yldate", models.DateTimeField(blank=True, null=True)),
                ("ytdhigh", models.FloatField(blank=True, null=True)),
                ("ytdlow", models.FloatField(blank=True, null=True)),
                ("ytdhdate", models.DateTimeField(blank=True, null=True)),
                ("ytdldate", models.DateTimeField(blank=True, null=True)),
                ("sihigh", models.FloatField(blank=True, null=True)),
                ("siLow", models.FloatField(blank=True, null=True)),
                ("sihdate", models.DateTimeField(blank=True, null=True)),
                ("sildate", models.DateTimeField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Net Asset Value High Low",
                "verbose_name_plural": "MF Net Asset Value High Low",
                "db_table": "mf_net_asset_value_high_low",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_net_asse_schemec_d7636f_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFNetAssetValueHistorical",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField(blank=True, null=True)),
                ("navdate", models.DateTimeField(blank=True, null=True)),
                ("navrs", models.FloatField(blank=True, null=True)),
                ("repurprice", models.FloatField(blank=True, null=True)),
                ("saleprice", models.FloatField(blank=True, null=True)),
                ("adjustednav_c", models.FloatField(blank=True, null=True)),
                ("adjustednav_nonc", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Net Asset Value Historical",
                "verbose_name_plural": "MF Net Asset Value Historical",
                "db_table": "mf_net_asset_value_historical",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "navdate"],
                        name="mf_net_asse_schemec_000489_idx",
                    )
                ],
                "unique_together": {("schemecode", "navdate")},
            },
        ),
        migrations.CreateModel(
            name="MFNSEAssetValueLatest",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("navdate", models.DateTimeField(blank=True, null=True)),
                ("navrs", models.FloatField(blank=True, null=True)),
                ("repurprice", models.FloatField(blank=True, null=True)),
                ("saleprice", models.FloatField(blank=True, null=True)),
                ("cldate", models.DateTimeField(blank=True, null=True)),
                ("change", models.FloatField(blank=True, null=True)),
                ("netchange", models.FloatField(blank=True, null=True)),
                ("prevnav", models.FloatField(blank=True, null=True)),
                ("prenavdate", models.DateTimeField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF NSE Asset Value Latest",
                "verbose_name_plural": "MF NSE Asset Value Latest",
                "db_table": "mf_nse_asset_value_latest",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_nse_asse_schemec_054404_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFOptionMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("opt_code", models.IntegerField()),
                ("option", models.CharField(max_length=30)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Option Master",
                "verbose_name_plural": "MF Option Masters",
                "db_table": "mf_option_master",
                "indexes": [
                    models.Index(
                        fields=["opt_code"], name="mf_option_m_opt_cod_5b099c_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFPlanMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("plan_code", models.IntegerField()),
                ("plan", models.CharField(max_length=50)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Plan Master",
                "verbose_name_plural": "MF Plan Masters",
                "db_table": "mf_plan_master",
                "indexes": [
                    models.Index(
                        fields=["plan_code"], name="mf_plan_mas_plan_co_58b436_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFPortfolio",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("invdate", models.DateTimeField(blank=True, null=True)),
                ("invenddate", models.DateTimeField(blank=True, null=True)),
                ("srno", models.IntegerField(blank=True, null=True)),
                ("fincode", models.IntegerField(blank=True, null=True)),
                ("ASECT_CODE", models.IntegerField(blank=True, null=True)),
                ("sect_code", models.IntegerField(blank=True, null=True)),
                (
                    "noshares",
                    models.DecimalField(
                        blank=True, decimal_places=0, max_digits=18, null=True
                    ),
                ),
                ("mktval", models.FloatField(blank=True, null=True)),
                ("aum", models.FloatField(blank=True, null=True)),
                ("holdpercentage", models.FloatField(blank=True, null=True)),
                ("compname", models.CharField(blank=True, max_length=255, null=True)),
                ("sect_name", models.CharField(blank=True, max_length=50, null=True)),
                ("asect_name", models.CharField(blank=True, max_length=50, null=True)),
                ("rating", models.CharField(blank=True, max_length=50, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Portfolio",
                "verbose_name_plural": "MF Portfolio",
                "db_table": "mf_portfolio",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "invdate", "srno"],
                        name="mf_portfoli_schemec_32452b_idx",
                    )
                ],
                "unique_together": {("schemecode", "invdate", "srno")},
            },
        ),
        migrations.CreateModel(
            name="MFPortfolioInOut",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("fincode", models.IntegerField()),
                ("invdate", models.DateTimeField(blank=True, null=True)),
                ("mode", models.CharField(max_length=5)),
                ("compname", models.CharField(blank=True, max_length=255, null=True)),
                ("s_name", models.CharField(blank=True, max_length=150, null=True)),
                ("mktval", models.FloatField(blank=True, null=True)),
                ("noshares", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Portfolio InOut",
                "verbose_name_plural": "MF Portfolio InOuts",
                "db_table": "mf_portfolio_inout",
                "indexes": [
                    models.Index(
                        fields=["fincode", "invdate", "mode"],
                        name="mf_portfoli_fincode_2a4f1d_idx",
                    )
                ],
                "unique_together": {("fincode", "invdate", "mode")},
            },
        ),
        migrations.CreateModel(
            name="MFRatios1Year",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("upddate", models.DateTimeField(blank=True, null=True)),
                ("datefrom", models.DateTimeField(blank=True, null=True)),
                ("dateto", models.DateTimeField(blank=True, null=True)),
                ("avg_x", models.FloatField(blank=True, null=True)),
                ("avg_y", models.FloatField(blank=True, null=True)),
                ("sd_x", models.FloatField(blank=True, null=True)),
                ("sd_y", models.FloatField(blank=True, null=True)),
                ("semisd_x", models.FloatField(blank=True, null=True)),
                ("semisd_y", models.FloatField(blank=True, null=True)),
                ("beta_x", models.FloatField(blank=True, null=True)),
                ("beta_y", models.FloatField(blank=True, null=True)),
                ("corelation_x", models.FloatField(blank=True, null=True)),
                ("corelation_y", models.FloatField(blank=True, null=True)),
                ("betacor_x", models.FloatField(blank=True, null=True)),
                ("betacor_y", models.FloatField(blank=True, null=True)),
                ("treynor_x", models.FloatField(blank=True, null=True)),
                ("treynor_y", models.FloatField(blank=True, null=True)),
                ("fama_x", models.FloatField(blank=True, null=True)),
                ("fama_y", models.FloatField(blank=True, null=True)),
                ("sharpe_x", models.FloatField(blank=True, null=True)),
                ("sharpe_y", models.FloatField(blank=True, null=True)),
                ("jalpha_x", models.FloatField(blank=True, null=True)),
                ("jalpha_y", models.FloatField(blank=True, null=True)),
                ("sortino_x", models.FloatField(blank=True, null=True)),
                ("sortino_y", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Ratios 1 Year",
                "verbose_name_plural": "MF Ratios 1 Year",
                "db_table": "mf_ratios_1_year",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_ratios_1_schemec_804e98_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFRatios3Year",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("SCHEMECODE", models.IntegerField()),
                ("RatioDate", models.DateField(blank=True, null=True)),
                ("Average_Nav", models.FloatField(blank=True, null=True)),
                ("SD_Nav", models.FloatField(blank=True, null=True)),
                ("SemiSD", models.FloatField(blank=True, null=True)),
                ("Beta", models.FloatField(blank=True, null=True)),
                ("Corel", models.FloatField(blank=True, null=True)),
                ("BetaCorel", models.FloatField(blank=True, null=True)),
                ("Rsq", models.FloatField(blank=True, null=True)),
                ("Trey", models.FloatField(blank=True, null=True)),
                ("Fama", models.FloatField(blank=True, null=True)),
                ("Sharpe", models.FloatField(blank=True, null=True)),
                ("Jalpha", models.FloatField(blank=True, null=True)),
                ("Sortino", models.FloatField(blank=True, null=True)),
                ("retdueimp", models.FloatField(blank=True, null=True)),
                ("retduesel", models.FloatField(blank=True, null=True)),
                ("downsideprob", models.FloatField(blank=True, null=True)),
                ("downsiderisk", models.FloatField(blank=True, null=True)),
                ("SortinoSD", models.FloatField(blank=True, null=True)),
                ("TrackingError", models.FloatField(blank=True, null=True)),
                ("InformationRatio", models.FloatField(blank=True, null=True)),
                ("SDAnn", models.FloatField(blank=True, null=True)),
                ("AvgIndex", models.FloatField(blank=True, null=True)),
                ("SD_Index", models.FloatField(blank=True, null=True)),
                ("CoVar", models.FloatField(blank=True, null=True)),
                ("MaxRet", models.FloatField(blank=True, null=True)),
                ("MinRet", models.FloatField(blank=True, null=True)),
                ("RFR", models.FloatField(blank=True, null=True)),
                ("PriceIndex", models.IntegerField(blank=True, null=True)),
                (
                    "PriceIndexName",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("Flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Ratios 3 Year",
                "verbose_name_plural": "MF Ratios 3 Year",
                "db_table": "mf_ratios_3_year",
                "indexes": [
                    models.Index(
                        fields=["SCHEMECODE"], name="mf_ratios_3_SCHEMEC_76f9cb_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFRatiosDefaultBenchmark1Year",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("upddate", models.DateTimeField(blank=True, null=True)),
                ("datefrom", models.DateTimeField(blank=True, null=True)),
                ("dateto", models.DateTimeField(blank=True, null=True)),
                ("average", models.FloatField(blank=True, null=True)),
                ("bmaverage", models.FloatField(blank=True, null=True)),
                ("sd", models.FloatField(blank=True, null=True)),
                ("bmsd", models.FloatField(blank=True, null=True)),
                ("semisd", models.FloatField(blank=True, null=True)),
                ("semisdii", models.FloatField(blank=True, null=True)),
                ("beta", models.FloatField(blank=True, null=True)),
                ("correlation", models.FloatField(blank=True, null=True)),
                ("beta_corelation", models.FloatField(blank=True, null=True)),
                ("covariance", models.FloatField(blank=True, null=True)),
                ("treynor", models.FloatField(blank=True, null=True)),
                ("fama", models.FloatField(blank=True, null=True)),
                ("sharpe", models.FloatField(blank=True, null=True)),
                ("alpha", models.FloatField(blank=True, null=True)),
                ("sortino", models.FloatField(blank=True, null=True)),
                ("sortinoii", models.FloatField(blank=True, null=True)),
                ("ret_improper", models.FloatField(blank=True, null=True)),
                ("ret_selectivity", models.FloatField(blank=True, null=True)),
                ("down_probability", models.FloatField(blank=True, null=True)),
                ("rsquared", models.FloatField(blank=True, null=True)),
                ("trackingError", models.FloatField(blank=True, null=True)),
                ("down_risk", models.FloatField(blank=True, null=True)),
                ("sd_annualised", models.FloatField(blank=True, null=True)),
                ("informationRatio", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Ratios Default Benchmark 1 Year",
                "verbose_name_plural": "MF Ratios Default Benchmark 1 Year",
                "db_table": "mf_ratios_default_benchmark_1_year",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_ratios_d_schemec_eca114_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFReferenceTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("table_name", models.CharField(max_length=255)),
                ("marker_name", models.CharField(max_length=255)),
                ("display_name", models.CharField(max_length=255)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "MF Reference Table",
                "verbose_name_plural": "MF Reference Table",
                "db_table": "mf_reference_table",
                "unique_together": {("table_name", "marker_name")},
            },
        ),
        migrations.CreateModel(
            name="MFRegistrarMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("rt_code", models.IntegerField()),
                ("rt_name", models.CharField(max_length=100)),
                ("sebi_reg_no", models.CharField(blank=True, max_length=50, null=True)),
                ("address1", models.TextField(blank=True, null=True)),
                ("address2", models.TextField(blank=True, null=True)),
                ("address3", models.TextField(blank=True, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("tel", models.TextField(blank=True, null=True)),
                ("fax", models.TextField(blank=True, null=True)),
                ("website", models.CharField(blank=True, max_length=100, null=True)),
                ("reg_address", models.TextField(blank=True, null=True)),
                ("email", models.CharField(blank=True, max_length=500, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Registrar Master",
                "verbose_name_plural": "MF Registrar Masters",
                "db_table": "mf_registrar_master",
                "indexes": [
                    models.Index(
                        fields=["rt_code"], name="mf_registra_rt_code_2e818e_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFReturn",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("c_date", models.DateTimeField(blank=True, null=True)),
                ("p_date", models.DateTimeField(blank=True, null=True)),
                ("c_nav", models.FloatField(blank=True, null=True)),
                ("p_nav", models.FloatField(blank=True, null=True)),
                ("_1dayret", models.FloatField(blank=True, null=True)),
                ("_1weekdate", models.DateTimeField(blank=True, null=True)),
                ("_1weeknav", models.FloatField(blank=True, null=True)),
                ("_1weekret", models.FloatField(blank=True, null=True)),
                ("_1mthdate", models.DateTimeField(blank=True, null=True)),
                ("_1mthnav", models.FloatField(blank=True, null=True)),
                ("_1monthret", models.FloatField(blank=True, null=True)),
                ("_3mthdate", models.DateTimeField(blank=True, null=True)),
                ("_3mthnav", models.FloatField(blank=True, null=True)),
                ("_3monthret", models.FloatField(blank=True, null=True)),
                ("_6mntdate", models.DateTimeField(blank=True, null=True)),
                ("_6mnthnav", models.FloatField(blank=True, null=True)),
                ("_6monthret", models.FloatField(blank=True, null=True)),
                ("_9mnthdate", models.DateTimeField(blank=True, null=True)),
                ("_9mnthnav", models.FloatField(blank=True, null=True)),
                ("_9mnthret", models.FloatField(blank=True, null=True)),
                ("_1yrdate", models.DateTimeField(blank=True, null=True)),
                ("_1yrnav", models.FloatField(blank=True, null=True)),
                ("_1yrret", models.FloatField(blank=True, null=True)),
                ("_2yrdate", models.DateTimeField(blank=True, null=True)),
                ("_2yrnav", models.FloatField(blank=True, null=True)),
                ("_2yearret", models.FloatField(blank=True, null=True)),
                ("_3yrdate", models.DateTimeField(blank=True, null=True)),
                ("_3yrnav", models.FloatField(blank=True, null=True)),
                ("_3yearret", models.FloatField(blank=True, null=True)),
                ("_4yrdate", models.DateTimeField(blank=True, null=True)),
                ("_4yrnav", models.FloatField(blank=True, null=True)),
                ("_4yearret", models.FloatField(blank=True, null=True)),
                ("_5yrdate", models.DateTimeField(blank=True, null=True)),
                ("_5yrnav", models.FloatField(blank=True, null=True)),
                ("_5yearret", models.FloatField(blank=True, null=True)),
                ("incdate", models.DateTimeField(blank=True, null=True)),
                ("incnav", models.FloatField(blank=True, null=True)),
                ("incret", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Return",
                "verbose_name_plural": "MF Returns",
                "db_table": "mf_return",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "c_date"],
                        name="mf_return_schemec_596c47_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeAssetAllocation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemeinv_id", models.IntegerField()),
                ("schemecode", models.IntegerField()),
                ("investment", models.CharField(max_length=500)),
                ("mininv", models.FloatField()),
                ("maxinv", models.FloatField()),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Asset Allocation",
                "verbose_name_plural": "MF Scheme Asset Allocation",
                "db_table": "mf_scheme_asset_allocation",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "investment"],
                        name="mf_scheme_a_schemec_61d226_idx",
                    )
                ],
                "unique_together": {("schemecode", "investment")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeAUM",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("exfof", models.FloatField(blank=True, null=True)),
                ("fof", models.FloatField(blank=True, null=True)),
                ("total", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme AUM",
                "verbose_name_plural": "MF Scheme AUMs",
                "db_table": "mf_scheme_aum",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "date"],
                        name="mf_scheme_a_schemec_ea88b1_idx",
                    )
                ],
                "unique_together": {("schemecode", "date")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeAverageMaturity",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField()),
                ("schemecode", models.IntegerField()),
                ("date", models.DateTimeField()),
                ("invenddate", models.DateTimeField(blank=True, null=True)),
                ("avg_mat_num", models.FloatField(blank=True, null=True)),
                (
                    "avg_mat_days",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("mod_dur_num", models.FloatField(blank=True, null=True)),
                (
                    "mod_dur_days",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("ytm", models.FloatField(blank=True, null=True)),
                ("turnover_ratio", models.FloatField(blank=True, null=True)),
                ("tr_mode", models.CharField(blank=True, max_length=10, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Average Maturity",
                "verbose_name_plural": "MF Scheme Average Maturity",
                "db_table": "mf_scheme_average_maturity",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "date"],
                        name="mf_scheme_a_schemec_f164a0_idx",
                    )
                ],
                "unique_together": {("schemecode", "date")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeClassMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("classcode", models.IntegerField()),
                ("classname", models.CharField(max_length=500)),
                ("asset_code", models.IntegerField()),
                ("asset_type", models.CharField(max_length=500)),
                ("category", models.CharField(max_length=500)),
                (
                    "sub_category",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Class Master",
                "verbose_name_plural": "MF Scheme Class Masters",
                "db_table": "mf_scheme_class_master",
                "indexes": [
                    models.Index(
                        fields=["classcode"], name="mf_scheme_c_classco_82bff2_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeEntryExitLoad",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("SCHEMECODE", models.IntegerField()),
                ("LDATE", models.DateTimeField(blank=True, null=True)),
                ("LTYPECODE", models.IntegerField(blank=True, null=True)),
                ("LSRNO", models.IntegerField()),
                ("FRMAMOUNT", models.FloatField(blank=True, null=True)),
                ("UPTOAMOUNT", models.FloatField(blank=True, null=True)),
                ("MINPERIOD", models.IntegerField(blank=True, null=True)),
                ("MAXPERIOD", models.IntegerField(blank=True, null=True)),
                ("MIN", models.CharField(blank=True, max_length=10, null=True)),
                ("MAX", models.CharField(blank=True, max_length=10, null=True)),
                ("ENTRYLOAD", models.FloatField(blank=True, null=True)),
                ("EXITLOAD", models.FloatField(blank=True, null=True)),
                ("REMARKS", models.TextField(blank=True, null=True)),
                (
                    "Period_Condition",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("Period_Type", models.CharField(blank=True, max_length=10, null=True)),
                ("Period", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "Amount_Condition",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("Amount_Type", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "Per_Condition",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("Per_Frm", models.FloatField(blank=True, null=True)),
                ("Per_To", models.FloatField(blank=True, null=True)),
                ("FLAG", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Entry Exit Load",
                "verbose_name_plural": "MF Scheme Entry Exit Load",
                "db_table": "mf_scheme_entry_exit_load",
                "indexes": [
                    models.Index(
                        fields=["SCHEMECODE", "LDATE", "LTYPECODE", "LSRNO"],
                        name="mf_scheme_e_SCHEMEC_d72540_idx",
                    )
                ],
                "unique_together": {("SCHEMECODE", "LDATE", "LTYPECODE", "LSRNO")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeEquityDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("SchemeCode", models.IntegerField()),
                ("MonthEnd", models.IntegerField(blank=True, null=True)),
                ("MCAP", models.FloatField(blank=True, null=True)),
                ("PE", models.FloatField(blank=True, null=True)),
                ("PB", models.FloatField(blank=True, null=True)),
                ("Div_Yield", models.FloatField(blank=True, null=True)),
                ("FLAG", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Equity Detail",
                "verbose_name_plural": "MF Scheme Equity Details",
                "db_table": "mf_scheme_equity_details",
                "indexes": [
                    models.Index(
                        fields=["SchemeCode"], name="mf_scheme_e_SchemeC_b3bd50_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeFMPYieldDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("maturitydate", models.DateTimeField(blank=True, null=True)),
                ("tenure_number", models.FloatField(blank=True, null=True)),
                (
                    "tenure_option",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("net_initcative_yield1", models.FloatField(blank=True, null=True)),
                ("net_initcative_yield2", models.FloatField(blank=True, null=True)),
                ("post_taxyield_ind1", models.FloatField(blank=True, null=True)),
                ("post_taxyield_ind2", models.FloatField(blank=True, null=True)),
                ("post_taxyield_nonind1", models.FloatField(blank=True, null=True)),
                ("post_taxyield_nonind2", models.FloatField(blank=True, null=True)),
                ("exit_load", models.CharField(blank=True, max_length=30, null=True)),
                ("rollover", models.CharField(blank=True, max_length=1, null=True)),
                (
                    "maturitydate_after_rollover",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("tenure_no_rollover", models.FloatField(blank=True, null=True)),
                (
                    "tenure_option_rollover",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme FMP Yield Details",
                "verbose_name_plural": "MF Scheme FMP Yield Details",
                "db_table": "mf_scheme_fmp_yield_details",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_scheme_f_schemec_2cd6b0_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeIndexMapping",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("SCHEMECODE", models.IntegerField()),
                ("INDEXCODE", models.IntegerField()),
                ("Benchmark_Weightage", models.FloatField(blank=True, null=True)),
                ("IndexOrder", models.IntegerField(blank=True, null=True)),
                ("Remark", models.CharField(blank=True, max_length=100, null=True)),
                ("FLAG", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Index Mapping",
                "verbose_name_plural": "MF Scheme Index Mappings",
                "db_table": "mf_scheme_index_mapping",
                "indexes": [
                    models.Index(
                        fields=["SCHEMECODE", "INDEXCODE"],
                        name="mf_scheme_i_SCHEMEC_36c683_idx",
                    )
                ],
                "unique_together": {("SCHEMECODE", "INDEXCODE")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeIsInMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("Id", models.IntegerField()),
                ("ISIN", models.CharField(max_length=100)),
                ("Schemecode", models.IntegerField()),
                ("Amc_code", models.IntegerField()),
                ("NseSymbol", models.CharField(blank=True, max_length=100, null=True)),
                ("Series", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "RTASchemecode",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "AMCSchemecode",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "LongSchemeDescrip",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ShortSchemeDescrip",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("Status", models.CharField(blank=True, max_length=10, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme ISIN Master",
                "verbose_name_plural": "MF Scheme ISIN Masters",
                "db_table": "mf_scheme_is_in_master",
                "indexes": [
                    models.Index(fields=["ISIN"], name="mf_scheme_i_ISIN_a28fee_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("amc_code", models.IntegerField(blank=True, null=True)),
                ("scheme_name", models.CharField(max_length=255)),
                ("color", models.CharField(max_length=50)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Master",
                "verbose_name_plural": "MF Scheme Masters",
                "db_table": "mf_scheme_master",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_scheme_m_schemec_f30ae9_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeMasterInDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("amfi_code", models.IntegerField(blank=True, null=True)),
                ("cams_code", models.CharField(blank=True, max_length=50, null=True)),
                ("amc_code", models.IntegerField(blank=True, null=True)),
                ("s_name", models.CharField(blank=True, max_length=255, null=True)),
                ("amfi_name", models.CharField(blank=True, max_length=500, null=True)),
                ("isin_code", models.CharField(blank=True, max_length=50, null=True)),
                ("type_code", models.IntegerField(blank=True, null=True)),
                ("opt_code", models.IntegerField(blank=True, null=True)),
                ("classcode", models.IntegerField(blank=True, null=True)),
                ("theme_code", models.IntegerField(blank=True, null=True)),
                ("rt_code", models.IntegerField(blank=True, null=True)),
                ("plan", models.IntegerField(blank=True, null=True)),
                ("cust_code", models.IntegerField(blank=True, null=True)),
                ("cust_code2", models.IntegerField(blank=True, null=True)),
                ("price_freq", models.IntegerField(blank=True, null=True)),
                ("init_price", models.FloatField(blank=True, null=True)),
                ("offerprice", models.FloatField(blank=True, null=True)),
                ("nfo_open", models.DateTimeField(blank=True, null=True)),
                ("nfo_close", models.DateTimeField(blank=True, null=True)),
                ("reopen_dt", models.DateTimeField(blank=True, null=True)),
                ("elf", models.CharField(blank=True, max_length=1, null=True)),
                ("etf", models.CharField(blank=True, max_length=1, null=True)),
                ("stp", models.CharField(blank=True, max_length=1, null=True)),
                ("primary_fund", models.CharField(blank=True, max_length=1, null=True)),
                ("primary_fd_code", models.IntegerField(blank=True, null=True)),
                ("sip", models.CharField(blank=True, max_length=1, null=True)),
                ("swp", models.CharField(blank=True, max_length=1, null=True)),
                ("switch", models.CharField(blank=True, max_length=1, null=True)),
                ("mininvt", models.FloatField(blank=True, null=True)),
                ("multiples", models.IntegerField(blank=True, null=True)),
                ("inc_invest", models.FloatField(blank=True, null=True)),
                ("adnmultiples", models.FloatField(blank=True, null=True)),
                ("fund_mgr1", models.CharField(blank=True, max_length=1000, null=True)),
                ("fund_mgr2", models.CharField(blank=True, max_length=1000, null=True)),
                ("fund_mgr3", models.CharField(blank=True, max_length=1000, null=True)),
                ("fund_mgr4", models.CharField(blank=True, max_length=1000, null=True)),
                ("since", models.DateTimeField(blank=True, null=True)),
                ("status", models.CharField(blank=True, max_length=50, null=True)),
                ("cutsub", models.CharField(blank=True, max_length=10, null=True)),
                ("cutred", models.CharField(blank=True, max_length=10, null=True)),
                ("red", models.CharField(blank=True, max_length=50, null=True)),
                ("mob_name", models.CharField(blank=True, max_length=255, null=True)),
                ("div_freq", models.IntegerField(blank=True, null=True)),
                (
                    "scheme_symbol",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("fund_mgr_code1", models.IntegerField(blank=True, null=True)),
                ("FUND_MGR_CODE2", models.IntegerField(blank=True, null=True)),
                ("FUND_MGR_CODE3", models.IntegerField(blank=True, null=True)),
                ("FUND_MGR_CODE4", models.IntegerField(blank=True, null=True)),
                ("Redemption_date", models.DateTimeField(blank=True, null=True)),
                ("DateOfAllot", models.DateTimeField(blank=True, null=True)),
                ("Div_Code", models.FloatField(blank=True, null=True)),
                ("LegalNames", models.CharField(blank=True, max_length=255, null=True)),
                ("AMFIType", models.CharField(blank=True, max_length=50, null=True)),
                ("NonTxnDay", models.CharField(blank=True, max_length=4, null=True)),
                ("SchemeBank", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "SchemeBankAccountNumber",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "SchemeBankBranch",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "DividendOptionFlag",
                    models.CharField(blank=True, max_length=1, null=True),
                ),
                ("LockIn", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "IsPurchaseAvailable",
                    models.CharField(blank=True, max_length=1, null=True),
                ),
                (
                    "IsRedeemAvailable",
                    models.CharField(blank=True, max_length=1, null=True),
                ),
                ("MinRedemptionAmount", models.FloatField(blank=True, null=True)),
                ("RedemptionMultipleAmount", models.FloatField(blank=True, null=True)),
                ("MinRedemptionUnits", models.FloatField(blank=True, null=True)),
                ("RedemptionMultiplesUnits", models.FloatField(blank=True, null=True)),
                ("MinSwitchAmount", models.FloatField(blank=True, null=True)),
                ("SwitchMultipleAmount", models.FloatField(blank=True, null=True)),
                ("MinSwitchUnits", models.FloatField(blank=True, null=True)),
                ("SwitchMultiplesUnits", models.FloatField(blank=True, null=True)),
                (
                    "securitycode",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("unit", models.CharField(blank=True, max_length=50, null=True)),
                ("SwitchOut", models.CharField(blank=True, max_length=1, null=True)),
                ("MinSwitchOutAmount", models.FloatField(blank=True, null=True)),
                ("SwitchOutMultipleAmount", models.FloatField(blank=True, null=True)),
                ("MinSwitchOutUnits", models.FloatField(blank=True, null=True)),
                ("SwitchOutMultiplesUnits", models.FloatField(blank=True, null=True)),
                ("Incept_date", models.DateTimeField(blank=True, null=True)),
                ("Incept_Nav", models.FloatField(blank=True, null=True)),
                ("DefaultOpt", models.CharField(blank=True, max_length=50, null=True)),
                ("DefaultPlan", models.CharField(blank=True, max_length=50, null=True)),
                ("LockPeriod", models.IntegerField(blank=True, null=True)),
                ("ODDraftDate", models.DateTimeField(blank=True, null=True)),
                ("Liquidated_Date", models.DateTimeField(blank=True, null=True)),
                ("Old_Plan", models.IntegerField(blank=True, null=True)),
                ("Direct_Plan", models.IntegerField(blank=True, null=True)),
                ("optionType", models.CharField(blank=True, max_length=10, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Master In Detail",
                "verbose_name_plural": "MF Scheme Master In Details",
                "db_table": "mf_scheme_master_in_details",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_scheme_m_schemec_8234e4_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeMonthWiseExpenseRatio",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("amc_code", models.IntegerField(blank=True, null=True)),
                ("schemecode", models.IntegerField()),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("expratio", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Month Wise Expense Ratio",
                "verbose_name_plural": "MF Scheme Month Wise Expense Ratio",
                "db_table": "mf_scheme_month_wise_expense_ratio",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "date"],
                        name="mf_scheme_m_schemec_3be48f_idx",
                    )
                ],
                "unique_together": {("schemecode", "date")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeNameChange",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("Amc_Code", models.IntegerField()),
                ("SchemeCode", models.IntegerField()),
                ("Effectivedate", models.DateTimeField()),
                ("OldName", models.CharField(max_length=255)),
                ("Newname", models.CharField(max_length=255)),
                ("Flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Name Change",
                "verbose_name_plural": "MF Scheme Name Change",
                "db_table": "mf_scheme_name_change",
                "indexes": [
                    models.Index(
                        fields=["Amc_Code", "SchemeCode", "Effectivedate"],
                        name="mf_scheme_n_Amc_Cod_da4ed2_idx",
                    )
                ],
                "unique_together": {("Amc_Code", "SchemeCode", "Effectivedate")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeObjective",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("objective", models.TextField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Objective",
                "verbose_name_plural": "MF Scheme Objectives",
                "db_table": "mf_scheme_objective",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_scheme_o_schemec_7ae649_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemePortfolioAUM",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("monthend", models.IntegerField(blank=True, null=True)),
                ("amc_code", models.IntegerField(blank=True, null=True)),
                ("aum", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme Portfolio AUM",
                "verbose_name_plural": "MF Scheme Portfolio AUMs",
                "db_table": "mf_scheme_portfolio_aum",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "monthend"],
                        name="mf_scheme_p_schemec_395c52_idx",
                    )
                ],
                "unique_together": {("schemecode", "monthend")},
            },
        ),
        migrations.CreateModel(
            name="MFSchemeRGESS",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("schemename", models.CharField(max_length=255)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme RGESS",
                "verbose_name_plural": "MF Scheme RGESS",
                "db_table": "mf_scheme_rgess",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_scheme_r_schemec_816999_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSchemeRTCode",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                (
                    "rtschemecode",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Scheme RT Code",
                "verbose_name_plural": "MF Scheme RT Codes",
                "db_table": "mf_scheme_rt_code",
                "indexes": [
                    models.Index(
                        fields=["schemecode"], name="mf_scheme_r_schemec_36f761_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MFSystematicInvestmentPlan",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("amc_code", models.IntegerField(blank=True, null=True)),
                ("frequency", models.CharField(max_length=100)),
                ("sip", models.CharField(max_length=1)),
                (
                    "sipdatescondition",
                    models.CharField(blank=True, max_length=8000, null=True),
                ),
                ("Dates", models.CharField(blank=True, max_length=8000, null=True)),
                ("sipdaysall", models.CharField(blank=True, max_length=50, null=True)),
                ("sipmininvest", models.FloatField(blank=True, null=True)),
                ("sipaddninvest", models.FloatField(blank=True, null=True)),
                ("sipfrequencyno", models.IntegerField(blank=True, null=True)),
                ("sipminimumperiod", models.IntegerField(blank=True, null=True)),
                (
                    "sipmaximumperiod",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "sipmincumamount",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("sipminunits", models.FloatField(blank=True, null=True)),
                ("sipmultiplesunits", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Systematic Investment Plan",
                "verbose_name_plural": "MF Systematic Investment Plan",
                "db_table": "mf_systematic_investment_plan",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "frequency"],
                        name="mf_systemat_schemec_d8d318_idx",
                    )
                ],
                "unique_together": {("schemecode", "frequency")},
            },
        ),
        migrations.CreateModel(
            name="MFSystematicTransferPlan",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("amc_code", models.IntegerField(blank=True, null=True)),
                ("frequency", models.CharField(max_length=100)),
                ("stpinout", models.CharField(max_length=1)),
                ("stp", models.CharField(max_length=1)),
                (
                    "stpdatescondition",
                    models.CharField(blank=True, max_length=8000, null=True),
                ),
                ("Dates", models.CharField(blank=True, max_length=8000, null=True)),
                ("stpdaysall", models.CharField(blank=True, max_length=50, null=True)),
                ("stpmininvest", models.FloatField(blank=True, null=True)),
                ("stpaddninvest", models.FloatField(blank=True, null=True)),
                ("stpfrequencyno", models.IntegerField(blank=True, null=True)),
                ("stpminimumperiod", models.IntegerField(blank=True, null=True)),
                (
                    "stpmaximumperiod",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "stpmincumamount",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("stpminunits", models.FloatField(blank=True, null=True)),
                ("stpmultiplesunits", models.FloatField(blank=True, null=True)),
                ("flag", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Systematic Transfer Plan",
                "verbose_name_plural": "MF Systematic Transfer Plan",
                "db_table": "mf_systematic_transfer_plan",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "frequency", "stpinout"],
                        name="mf_systemat_schemec_1406a1_idx",
                    )
                ],
                "unique_together": {("schemecode", "frequency", "stpinout")},
            },
        ),
        migrations.CreateModel(
            name="MFSystematicWithdrawalPlan",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("schemecode", models.IntegerField()),
                ("amc_code", models.IntegerField(blank=True, null=True)),
                ("frequency", models.CharField(max_length=100)),
                ("swp", models.CharField(max_length=1)),
                (
                    "swpdatescondition",
                    models.CharField(blank=True, max_length=8000, null=True),
                ),
                ("Dates", models.CharField(blank=True, max_length=8000, null=True)),
                ("swpdaysall", models.CharField(blank=True, max_length=50, null=True)),
                ("swpmininvest", models.FloatField(blank=True, null=True)),
                ("swpaddninvest", models.FloatField(blank=True, null=True)),
                ("swpfrequencyno", models.IntegerField(blank=True, null=True)),
                ("swpminimumperiod", models.IntegerField(blank=True, null=True)),
                (
                    "swpmaximumperiod",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "swpmincumamount",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("swpminunits", models.FloatField(blank=True, null=True)),
                ("swpmultiplesunits", models.FloatField(blank=True, null=True)),
                ("Flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Systematic Withdrawal Plan",
                "verbose_name_plural": "MF Systematic Withdrawal Plan",
                "db_table": "mf_systematic_withdrawal_plan",
                "indexes": [
                    models.Index(
                        fields=["schemecode", "frequency"],
                        name="mf_systemat_schemec_0aa06e_idx",
                    )
                ],
                "unique_together": {("schemecode", "frequency")},
            },
        ),
        migrations.CreateModel(
            name="MFTypeMaster",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("type_code", models.IntegerField()),
                ("type", models.CharField(max_length=50)),
                ("flag", models.CharField(max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MF Type Master",
                "verbose_name_plural": "MF Type Masters",
                "db_table": "mf_type_master",
                "indexes": [
                    models.Index(
                        fields=["type_code"], name="mf_type_mas_type_co_ce33b7_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ConditionalQuestion",
            fields=[
                ("deleted", models.BooleanField(default=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("visibility", models.CharField(max_length=50)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "response",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.allowed_response",
                    ),
                ),
                (
                    "dependent_question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dependent_question",
                        to="ai_mf_backend.question",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="main_question",
                        to="ai_mf_backend.question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Conditional Question",
                "verbose_name_plural": "Conditional Question",
                "db_table": "conditional_question",
            },
        ),
        migrations.AddField(
            model_name="allowed_response",
            name="question",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ai_mf_backend.question",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="section",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ai_mf_backend.section",
            ),
        ),
        migrations.CreateModel(
            name="MFResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("scheme_code", models.IntegerField()),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "marker_id",
                    models.ForeignKey(
                        db_column="marker_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.mfmarker",
                    ),
                ),
                (
                    "option_id",
                    models.ForeignKey(
                        db_column="option_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.mfmarkeroptions",
                    ),
                ),
                (
                    "section_id",
                    models.ForeignKey(
                        db_column="section_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.section",
                    ),
                ),
            ],
            options={
                "verbose_name": "MF Response",
                "verbose_name_plural": "MF Response",
                "db_table": "mf_response",
            },
        ),
        migrations.AddField(
            model_name="mfmarker",
            name="section_id",
            field=models.ForeignKey(
                db_column="section_id",
                on_delete=django.db.models.deletion.PROTECT,
                to="ai_mf_backend.section",
            ),
        ),
        migrations.CreateModel(
            name="MarkerWeightsPerMutualFund",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("scheme_code", models.IntegerField()),
                ("weight", models.FloatField(default=0.0)),
                (
                    "marker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.mfmarker",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="ai_mf_backend.section",
                    ),
                ),
            ],
            options={
                "verbose_name": "Marker Weights Per Mutual Fund",
                "verbose_name_plural": "Marker Weights Per Mutual Fund",
                "db_table": "marker_weights_per_mutual_fund",
            },
        ),
        migrations.AddField(
            model_name="allowed_response",
            name="section",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ai_mf_backend.section",
            ),
        ),
        migrations.CreateModel(
            name="UserContactInfo",
            fields=[
                ("deleted", models.BooleanField(default=False)),
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                (
                    "mobile_number",
                    models.CharField(
                        blank=True,
                        null=True,
                        unique=True,
                        validators=[
                            ai_mf_backend.models.v1.database.user.validate_mobile_number
                        ],
                    ),
                ),
                ("password", models.CharField(blank=True, max_length=100, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("questionnaire_filled", models.BooleanField(default=False)),
                ("user_details_filled", models.BooleanField(default=False)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "User Contact Info",
                "verbose_name_plural": "User Contact Info",
                "db_table": "user_contact_info",
                "indexes": [
                    models.Index(fields=["email"], name="user_contac_email_f59fcd_idx"),
                    models.Index(
                        fields=["mobile_number"], name="user_contac_mobile__5846b8_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SectionWeightsPerUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("embedding", pgvector.django.vector.VectorField(dimensions=7)),
                (
                    "user_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionWeightsPerUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("weight", models.FloatField(default=0.0)),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.question",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.section",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OTPlogs",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("otp", models.IntegerField()),
                ("otp_valid", models.DateTimeField()),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "OTP Logs",
                "verbose_name_plural": "OTP Logs",
                "db_table": "otp_logs",
            },
        ),
        migrations.AddField(
            model_name="blogdata",
            name="user_id",
            field=models.ForeignKey(
                db_column="user_id",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ai_mf_backend.usercontactinfo",
            ),
        ),
        migrations.CreateModel(
            name="BlogCommentReply",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("content", models.TextField()),
                (
                    "username",
                    models.CharField(
                        blank=True, editable=False, max_length=150, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "parent_comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="ai_mf_backend.blogcomment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Comment Reply",
                "verbose_name_plural": "Blog Comment Replies",
                "db_table": "blog_comment_reply",
            },
        ),
        migrations.AddField(
            model_name="blogcomment",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ai_mf_backend.usercontactinfo",
            ),
        ),
        migrations.CreateModel(
            name="UserFinancialDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "regular_source_of_income",
                    models.BooleanField(
                        blank=True,
                        choices=[(True, "Yes"), (False, "No")],
                        default=None,
                        null=True,
                    ),
                ),
                (
                    "lock_in_period_accepted",
                    models.BooleanField(
                        blank=True,
                        choices=[(True, "Yes"), (False, "No")],
                        default=None,
                        null=True,
                    ),
                ),
                (
                    "investment_style",
                    models.CharField(
                        blank=True,
                        choices=[("SIP", "SIP"), ("Lump-Sum", "Lump-Sum")],
                        default=None,
                        max_length=10,
                        null=True,
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "income_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.annualincome",
                    ),
                ),
                (
                    "investment_amount_per_year",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.investmentamountperyear",
                    ),
                ),
                (
                    "occupation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.occupation",
                    ),
                ),
                (
                    "saving_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.monthlysavingcapacity",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Financial Detail",
                "verbose_name_plural": "User Financial Details",
                "db_table": "user_financial_details",
            },
        ),
        migrations.CreateModel(
            name="UserLogs",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("ip_details", models.JSONField(blank=True, null=True)),
                (
                    "device_type",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("last_access", models.DateTimeField()),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("login", "Logged In"),
                            ("logged_out", "Logged Out"),
                            ("signup", "Signed Up"),
                            ("profile_update", "Profile Updated"),
                            ("invalid", "invalid_action"),
                        ],
                        default="invalid",
                        max_length=15,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Logs",
                "verbose_name_plural": "User Logs",
                "db_table": "user_logs",
            },
        ),
        migrations.CreateModel(
            name="UserPersonalDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.name.validate_name
                        ],
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.dates.validate_reasonable_birth_date,
                            ai_mf_backend.utils.v1.validators.dates.validate_not_future_date,
                        ],
                    ),
                ),
                (
                    "user_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="user_images/",
                        validators=[
                            ai_mf_backend.utils.v1.database.images.validate_image_size
                        ],
                    ),
                ),
                (
                    "add_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.dates.validate_not_future_date
                        ],
                    ),
                ),
                (
                    "update_date",
                    models.DateTimeField(
                        auto_now=True,
                        validators=[
                            ai_mf_backend.utils.v1.validators.dates.validate_not_future_date
                        ],
                    ),
                ),
                (
                    "gender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.gender",
                    ),
                ),
                (
                    "marital_status",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.maritalstatus",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Personal Details",
                "verbose_name_plural": "User Personal Details",
                "db_table": "user_personal_details",
            },
        ),
        migrations.CreateModel(
            name="UserResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "question_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.question",
                    ),
                ),
                (
                    "response_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.allowed_response",
                    ),
                ),
                (
                    "section_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.section",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Response",
                "verbose_name_plural": "User Response",
                "db_table": "user_response",
            },
        ),
        migrations.CreateModel(
            name="UserReview",
            fields=[
                ("deleted", models.BooleanField(default=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "username",
                    models.CharField(
                        blank=True, editable=False, max_length=100, null=True
                    ),
                ),
                (
                    "designation",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("review_title", models.CharField(max_length=100)),
                ("review_body", models.TextField()),
                (
                    "number_of_stars",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "user_image",
                    models.ImageField(
                        blank=True, editable=False, null=True, upload_to=""
                    ),
                ),
                ("add_date", models.DateTimeField(auto_now_add=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="user_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Review",
                "verbose_name_plural": "User Reviews",
                "db_table": "user_review",
            },
        ),
        migrations.CreateModel(
            name="BlogCommentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                ("reported_at", models.DateTimeField(auto_now_add=True)),
                (
                    "username",
                    models.CharField(
                        blank=True, editable=False, max_length=150, null=True
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="ai_mf_backend.blogcomment",
                    ),
                ),
                (
                    "reply",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reply_reports",
                        to="ai_mf_backend.blogcommentreply",
                    ),
                ),
                (
                    "report_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_mf_backend.blogcommentreporttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_mf_backend.usercontactinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Comment Report",
                "verbose_name_plural": "Blog Comment Reports",
                "db_table": "blog_comment_report",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("comment__isnull", False), ("reply__isnull", True)
                            ),
                            models.Q(
                                ("comment__isnull", True), ("reply__isnull", False)
                            ),
                            _connector="OR",
                        ),
                        name="blog_comment_report_comment_or_reply",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="blogcommentreply",
            index=models.Index(
                fields=["parent_comment"], name="blog_commen_parent__22b0d3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogcommentreply",
            index=models.Index(
                fields=["created_at"], name="blog_commen_created_db28b5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userlogs",
            index=models.Index(fields=["user"], name="user_logs_user_id_2c9228_idx"),
        ),
        migrations.RunSQL(
            sql="""
            CREATE INDEX hnsw_embedding_idx ON section_weights_per_mutual_fund 
            USING hnsw (embedding vector_l2_ops) 
            WITH (m = 16, ef_construction = 64);
            """,
            reverse_sql="DROP INDEX IF EXISTS hnsw_embedding_idx",
        ),
    ]
